<?php
// このﾌｧｲﾙの名前空間の定義
namespace SKJ;

// 別名定義
use _AppException;

/**
 * ｱﾌﾟﾘｹｰｼｮﾝﾚﾍﾞﾙで発生する例外の基底となる例外
 *
 * ｱﾌﾟﾘｹｰｼｮﾝﾚﾍﾞﾙで発生した例外は全てこの例外を継承します
 *
 * ◆詳細◆
 * <ul>
 *     <li>この例外を直接投げるようなことはしないで下さい</li>
 *     <li>この例外を継承した\SKJ\AppException\LogicException、\SKJ\AppException\RuntimeException、もしくはこの両例外を継承した更なる詳細例外を投げて下さい</li>
 *     <li>_AppExceptionｴｸｽﾃﾝｼｮﾝが有効な場合にこのｸﾗｽが組み込まれます</li>
 * </ul>
 *
 * @package SKJ\AppException
 * @author y3high <y3public@49364.net>
 * @copyright 2019 Seikouhou.
 * @license https://opensource.org/licenses/MIT MIT
 * @since Class available since Release 0.8.0
 */
class AppException extends _AppException implements AppExceptionInterface
{
    /**
     * AppException 共通ﾒｿｯﾄﾞの取り込み
     */
    use AppExceptionMethods;
    /**
     * 基底例外ｺｰﾄﾞを算出するにあたってのﾌｧｲﾙの最大行数
     *
     * @internal
     */
    const MAX_LINE_IN_FILE = 999999;
    /**
     * 例外発生時のｸﾞﾛｰﾊﾞﾙ変数のｽﾅｯﾌﾟｼｮｯﾄを撮りたい時に、ｺﾝｽﾄﾗｸﾀの第4引数に指定する定数
     *
     * @api
     */
    const OPT_GLOBAL_VARS_SNAPSHOT = 1;
    /**
     * 例外発生時のﾛｰｶﾙ変数のｽﾅｯﾌﾟｼｮｯﾄを撮りたい時に、ｺﾝｽﾄﾗｸﾀの第4引数に指定する定数
     *
     * @api
     */
    const OPT_CALLER_VARS_SNAPSHOT = 2;
    /**
     * ｻﾌﾞｸﾗｽにて初期値を上書きする可能性あり
     *
     * @api
     * @var string ｺﾝｽﾄﾗｸﾀの引数<var>$message</var>が渡されなかった場合の既定の例外ﾒｯｾｰｼﾞ
     */
    protected $defMessage = '例外が発生しました';
    /**
     * ｻﾌﾞｸﾗｽにて初期値を上書きする可能性あり
     *
     * @api
     * @var string ｺﾝｽﾄﾗｸﾀの引数<var>$message</var>が配列で渡された場合にvsprintfに渡すﾌｫｰﾏｯﾄ文字列
     */
    protected $messageTemplate = '例外が%sで発生しました';
    /**
     * ｻﾌﾞｸﾗｽにて初期値を上書きする可能性あり
     *
     * @api
     * @var int ｺﾝｽﾄﾗｸﾀの引数<var>$code</var>が渡されなかった場合の既定の例外ｺｰﾄﾞ
     */
    protected $defCode = 1000;
    /**
     * ｻﾌﾞｸﾗｽにて初期値を上書きする可能性あり
     *
     * @api
     * @var mixed 補助的に使用される状態ｺｰﾄﾞ(ﾃﾞﾌｫﾙﾄはself::<var>$defCode</var>と同じ)
     */
    protected $statusCode = 1000;
    /**
     * ｻﾌﾞｸﾗｽにて初期値を上書きする可能性あり
     *
     * @api
     * @var int このｵﾌﾞｼﾞｪｸﾄをｲﾃﾚｰﾀとして扱った時に返す連結された例外のｿｰﾄ順
     * @uses self::SORT_ORDER_DESC 初期値として使用
     */
    protected $iteratorSortOrder = self::SORT_ORDER_DESC;

    /**
     * $enableGlobalVarsSnapShotと$enableCallerVarsSnapShotはstaticなので、
     * ｵｰﾊﾞｰﾗｲﾄﾞすると親と子にそれぞれ別の値が存在する事になるので未定義
     * ただ、子のｸﾗｽ::$enableGlobalVarsSnapShotで値を変えるぶんには問題なく、
     * 親のｸﾗｽの$enableGlobalVarsSnapShotが変わる
     */

    /**
     * 初期化処理
     *
     * 親ｸﾗｽより呼ばれる初期化処理
     *
     * @internal
     */
    protected function _initialize()
    {
        $this->callQueue = array_reverse(debug_backtrace());
        array_pop($this->callQueue);
    }
}
